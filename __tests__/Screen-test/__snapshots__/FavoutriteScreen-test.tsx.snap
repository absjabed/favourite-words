// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Favoutrite Screen snapshot 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#121212",
      "flex": 1,
      "flexDirection": "column",
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "justifyContent": "center",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "marginRight": "15%",
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignSelf": "stretch",
            },
            undefined,
          ]
        }
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="ios_touchable_wrapper"
        >
          <View
            pointerEvents="box-only"
          >
            <TextInput
              allowFontScaling={true}
              editable={false}
              rejectResponderTermination={true}
              style={
                Array [
                  Object {
                    "borderColor": "gray",
                    "borderRadius": 4,
                    "borderWidth": 1,
                    "color": "black",
                    "fontSize": 16,
                    "paddingHorizontal": 10,
                    "paddingRight": 30,
                    "paddingVertical": 12,
                    "width": "100%",
                  },
                  Object {
                    "color": "#c7c7cd",
                  },
                ]
              }
              testID="text_input"
              underlineColorAndroid="transparent"
              value="Select type..."
            />
            <View
              style={
                Array [
                  Object {
                    "position": "absolute",
                    "right": 0,
                  },
                  undefined,
                ]
              }
              testID="icon_container"
            >
              <Icon
                name="caret-down"
                style={
                  Object {
                    "color": "#ffffff",
                    "left": 5,
                    "marginTop": 15,
                  }
                }
              />
            </View>
          </View>
        </View>
        <Modal
          hardwareAccelerated={false}
          onOrientationChange={[Function]}
          supportedOrientations={
            Array [
              "portrait",
              "landscape",
            ]
          }
          testID="ios_modal"
          transparent={true}
          visible={false}
        >
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "flex": 1,
                "opacity": 1,
              }
            }
            testID="ios_modal_top"
          />
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#f8f8f8",
                  "borderTopColor": "#dedede",
                  "borderTopWidth": 1,
                  "flexDirection": "row",
                  "height": 45,
                  "justifyContent": "space-between",
                  "paddingHorizontal": 10,
                  "zIndex": 2,
                },
                undefined,
              ]
            }
            testID="input_accessory_view"
          >
            <View
              style={
                Array [
                  Object {
                    "flexDirection": "row",
                  },
                  undefined,
                ]
              }
            >
              <View
                accessible={true}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "#a1a1a1",
                        "borderRightWidth": 1.5,
                        "borderTopWidth": 1.5,
                        "height": 15,
                        "width": 15,
                      },
                      undefined,
                      Object {
                        "marginLeft": 11,
                        "transform": Array [
                          Object {
                            "translateY": 4,
                          },
                          Object {
                            "rotate": "-45deg",
                          },
                        ],
                      },
                      undefined,
                      Object {},
                    ]
                  }
                />
              </View>
              <View
                accessible={true}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "backgroundColor": "transparent",
                        "borderColor": "#a1a1a1",
                        "borderRightWidth": 1.5,
                        "borderTopWidth": 1.5,
                        "height": 15,
                        "width": 15,
                      },
                      undefined,
                      Object {
                        "marginLeft": 22,
                        "transform": Array [
                          Object {
                            "translateY": -5,
                          },
                          Object {
                            "rotate": "135deg",
                          },
                        ],
                      },
                      undefined,
                      Object {},
                    ]
                  }
                />
              </View>
            </View>
            <View
              accessible={true}
              focusable={true}
              hitSlop={
                Object {
                  "bottom": 4,
                  "left": 4,
                  "right": 4,
                  "top": 4,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
              testID="done_button"
            >
              <View
                testID="needed_for_touchable"
              >
                <Text
                  allowFontScaling={false}
                  style={
                    Array [
                      Object {
                        "color": "#007aff",
                        "fontSize": 17,
                        "fontWeight": "600",
                        "paddingRight": 11,
                        "paddingTop": 1,
                      },
                      undefined,
                      Object {},
                    ]
                  }
                  testID="done_text"
                >
                  Done
                </Text>
              </View>
            </View>
          </View>
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "#d0d4da",
                  "justifyContent": "center",
                },
                Object {
                  "height": 215,
                },
                undefined,
              ]
            }
          >
            <View>
              <RNCPicker
                items={
                  Array [
                    Object {
                      "label": "Select type...",
                      "testID": undefined,
                      "textColor": 4278190080,
                      "value": null,
                    },
                  ]
                }
                onChange={[Function]}
                selectedIndex={0}
                style={
                  Array [
                    Object {
                      "height": 216,
                    },
                    undefined,
                  ]
                }
                testID="ios_picker"
              />
            </View>
          </View>
        </Modal>
      </View>
    </View>
    <View
      style={
        Object {
          "justifyContent": "center",
          "marginTop": 15,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#acacac",
            "fontFamily": "Ubuntu-Bold",
            "fontSize": 15,
          }
        }
      >
        Saved Favoutrites
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "marginBottom": 45,
        "marginTop": 10,
        "width": "100%",
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <View
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "center",
              "paddingTop": "50%",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#5f5f5f",
                "fontFamily": "Ubuntu-Bold",
                "fontSize": 18,
              }
            }
          >
            No Info Available
          </Text>
        </View>
      }
      contentContainerStyle={
        Object {
          "padding": 10,
        }
      }
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "center",
              "paddingTop": "50%",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#5f5f5f",
                "fontFamily": "Ubuntu-Bold",
                "fontSize": 18,
              }
            }
          >
            No Info Available
          </Text>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;
